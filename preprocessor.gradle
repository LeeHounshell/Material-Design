// -------------------------------------------------------------------------------------------------
// Android seems to want to duplicate code using 'buildTypes' and 'flavors' but when minor differences exist
// it is inefficient to maintain mostly duplicate copies of code this way.  The code below allows java source code
// to be edited in place. Source sections are commented or uncommented based on specially crafted comments:
//
//#IFDEF 'configuration'
//    java code for the specified 'configuration'
//#ELSE
//    java code for NOT the specified 'configuration'
//#ENDIF
//
// The 'configuration' specified above can be a BUILD_TYPE or FLAVOR or BUILD_TYPE+FLAVOR or FLAVOR+BUILD_TYPE
// For example: 'debug' or 'release' or 'paid' or 'free'
//              or 'debugpaid' or 'debugfree 'or 'releasepaid' or 'releasefree'
//              or 'paiddebug' or 'freedebug' or 'paidrelease' or 'freerelease'..
//              these are all valid 'configuration' entries and will be processed by #IFDEF depending on buildType and flavor.
// Note that nested #IFDEF statements are not supported (and there is no actual need to nest).
// Also the 'configuration' is case independent
//
// To use this preprocessor, add the following line to your app/build.gradle:
//     apply from: 'preprocessor.gradle'
//
// Then in your java source with build dependencies, do something like this:
//
//#IFDEF 'paidRelease'
//Log.v(TAG, "example of #IFDEF 'paidRelease'");
//#ELSE
//Log.v(TAG, "example of NOT #IFDEF 'paidRelease'");
//#ENDIF
//
// Now during a gradle build, the appropriate lines of java code will be commented and uncommented as required.
//
// Author: Lee Hounshell - lee.hounshell@gmail.com - Jan 11, 2016
// See: http://harlie.com/?p=38

 
String sourceDirectory = 'src'
FileTree javaFiles = fileTree(sourceDirectory) {
    include '**/*.java'
}
 
// auto comment and uncomment source lines between #IFDEF 'configuration' and #ELSE or #ENDIF
// each matching java source file is edited in-place
class PreProcessor {
 
    public enum IfdefState {
        NONE,
        IFDEF,
        ELSE
    }
 
    public static void preProcessSourceCode (FileTree javaFiles, String buildType, String flavor) {
        buildType = buildType.toLowerCase()
        flavor = flavor.toLowerCase()
        println("---> preProcessSourceCode BUILD_TYPE="+buildType+" FLAVOR="+flavor)
        String buildTypeAndFlavor = buildType + flavor
        String flavorAndBuildType = flavor + buildType
        String ifdefRegex = '^([ ]*)(\\/\\/)#IFDEF \'(.*)\'$'
        String elseRegex = '^([ ]*)(\\/\\/)#ELSE$'
        String endifRegex = '^([ ]*)(\\/\\/)#ENDIF$'
        String lineRegex = '^([ ]*)([^ ][^ ])(.*)$'
        String singleCharLineRegex = '^([ ]*)([^ ])$'
        String comment = "//"
        String newline = System.getProperty("line.separator")
 
        javaFiles.each { File javaFile ->
            println "checking for '$ifdefRegex' in $javaFile.name"
            String content = javaFile.getText()
            StringBuilder newContent = new StringBuilder()
            IfdefState match = IfdefState.NONE
            boolean changed = false;
            String buildTypeAndOrFlavor = "<undefined>"
            content.eachLine { line, index ->
                // process #IFDEF
                if (line.matches(ifdefRegex)) {
                    buildTypeAndOrFlavor = (line.split('\'')[1]).toLowerCase()
                    println("--> #IFDEF on line $index for $buildTypeAndOrFlavor")
                    if (buildTypeAndOrFlavor.equals(buildType)) {
                        match = IfdefState.IFDEF
                        println("--> $buildTypeAndOrFlavor IS A MATCH FOR BUILD_TYPE $buildType")
                    }
                    else if (buildTypeAndOrFlavor.equals(flavor)) {
                        match = IfdefState.IFDEF
                        println("--> $buildTypeAndOrFlavor IS A MATCH FOR FLAVOR $flavor")
                    }
                    else if (buildTypeAndOrFlavor.equals(buildTypeAndFlavor)) {
                        match = IfdefState.IFDEF
                        println("--> $buildTypeAndOrFlavor IS A MATCH FOR COMBO BUILD_TYPE PLUS FLAVOR $buildTypeAndFlavor")
                    }
                    else if (buildTypeAndOrFlavor.equals(flavorAndBuildType)) {
                        match = IfdefState.IFDEF
                        println("--> $buildTypeAndOrFlavor IS A MATCH FOR COMBO FLAVOR PLUS BUILD_TYPE $flavorAndBuildType")
                    }
                    else {
                        match = IfdefState.ELSE
                        println("--> $buildTypeAndOrFlavor IS NOT A MATCH FOR BUILD_TYPE $buildType OR FLAVOR $flavor OR COMBO $buildTypeAndFlavor OR COMBO $flavorAndBuildType")
                    }
                }
                // process #ELSE
                else if (line.matches(elseRegex)) {
                    println("--> #ELSE on line $index for $buildTypeAndOrFlavor")
                    if (match != IfdefState.ELSE) {
                        match = IfdefState.ELSE
                        println("--> $buildTypeAndOrFlavor IS NOT A MATCH FOR #ELSE")
                    }
                    else {
                        match = IfdefState.IFDEF
                        println("--> $buildTypeAndOrFlavor IS A MATCH FOR #ELSE")
                    }
                }
                // process #ENDIF
                else if (line.matches(endifRegex)) {
                    println("--> #ENDIF on line $index for $buildTypeAndOrFlavor")
                    match = IfdefState.NONE
                }
                // comment or uncomment code or leave it unchanged
                else {
                    if (match == IfdefState.IFDEF) { // ifdef: uncomment lines up to #ELSE or #ENDIF, as needed
                        if (line.matches(lineRegex)) {
                            def matcher = line =~ lineRegex
                            if (matcher[0][2].equals(comment)) {
                                line = matcher[0][1] + matcher[0][3]
                                changed = true
                                println(line)
                            }
                        }
                    } else if (match == IfdefState.ELSE) { // else: comment-out lines to #ELSE or #ENDIF, as needed
                        if (line.matches(lineRegex)) {
                            def matcher = line =~ lineRegex
                            if (!matcher[0][2].equals(comment)) {
                                line = matcher[0][1] + comment + matcher[0][2] + matcher[0][3]
                                changed = true
                                println(line)
                            }
                        }
                        else if (line.matches(singleCharLineRegex)) {
                            def matcher = line =~ singleCharLineRegex
                            if (!matcher[0][2].equals(comment)) {
                                line = matcher[0][1] + comment + matcher[0][2]
                                changed = true
                                println(line)
                            }
                        }
                    }
                }
                newContent.append(line + newline)
            }
            // save the file if was edited
            if (changed) {
                println("==> EDITING THE FILE <==")
                javaFile.setText(newContent.toString())
            }
        }
    }
 
}
 
task preProcessSourceCodeDebugFree << {
    logger.quiet("---> PreProcessor.preProcessSourceCode(javaFiles, 'debug', 'free')")
    description("preprocess free code after //#IFDEF 'debug' to //#ENDIF")
    PreProcessor.preProcessSourceCode(javaFiles, 'debug', 'free')
}
 
task preProcessSourceCodeDebugPaid << {
    logger.quiet("---> PreProcessor.preProcessSourceCode(javaFiles, 'debug', 'paid')")
    description("preprocess paid code after //#IFDEF 'debug' to //#ENDIF")
    PreProcessor.preProcessSourceCode(javaFiles, 'debug', 'paid')
}
 
task preProcessSourceCodeReleaseFree << {
    logger.quiet("---> PreProcessor.preProcessSourceCode(javaFiles, 'release', 'free')")
    description("preprocess free code after //#IFDEF 'release' to //#ENDIF")
    PreProcessor.preProcessSourceCode(javaFiles, 'release', 'free')
}
 
task preProcessSourceCodeReleasePaid << {
    logger.quiet("---> PreProcessor.preProcessSourceCode(javaFiles, 'release', 'paid')")
    description("preprocess paid code after //#IFDEF 'release' to //#ENDIF")
    PreProcessor.preProcessSourceCode(javaFiles, 'release', 'paid')
}
 
tasks.whenTaskAdded { task ->
    if (task.name == 'compileFreeDebugJavaWithJavac') {
        logger.quiet('---> compileFreeDebugJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeDebugFree
        preProcessSourceCodeDebugFree.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compileFreeReleaseJavaWithJavac') {
        logger.quiet('---> compileFreeReleaseJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeReleaseFree
        preProcessSourceCodeReleaseFree.outputs.upToDateWhen { false } // always run
    }
    if (task.name == 'compilePaidDebugJavaWithJavac') {
        logger.quiet('---> compilePaidDebugJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeDebugPaid
        preProcessSourceCodeDebugPaid.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compilePaidReleaseJavaWithJavac') {
        logger.quiet('---> compilePaidReleaseJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeReleasePaid
        preProcessSourceCodeReleasePaid.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compileFreeDebugUnitTestJavaWithJavac') {
        logger.quiet('---> compileFreeDebugUnitTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeDebugFree
        preProcessSourceCodeDebugFree.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compileFreeReleaseUnitTestJavaWithJavac') {
        logger.quiet('---> compileFreeReleaseUnitTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeReleaseFree
        preProcessSourceCodeReleaseFree.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compilePaidDebugUnitTestJavaWithJavac') {
        logger.quiet('---> compilePaidDebugUnitTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeDebugPaid
        preProcessSourceCodeDebugPaid.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compilePaidReleaseUnitTestJavaWithJavac') {
        logger.quiet('---> compilePaidReleaseUnitTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeReleasePaid
        preProcessSourceCodeReleasePaid.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compileFreeDebugAndroidTestJavaWithJavac') {
        logger.quiet('---> compileFreeDebugAndroidTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeDebugFree
        preProcessSourceCodeDebugFree.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compileFreeReleaseAndroidTestJavaWithJavac') {
        logger.quiet('---> compileFreeReleaseAndroidTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeReleaseFree
        preProcessSourceCodeReleaseFree.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compilePaidDebugAndroidTestJavaWithJavac') {
        logger.quiet('---> compilePaidDebugAndroidTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeDebugPaid
        preProcessSourceCodeDebugPaid.outputs.upToDateWhen { false } // always run
    }
    else if (task.name == 'compilePaidReleaseAndroidTestJavaWithJavac') {
        logger.quiet('---> compilePaidReleaseAndroidTestJavaWithJavac dependsOn preProcessSourceCode')
        task.dependsOn preProcessSourceCodeReleasePaid
        preProcessSourceCodeReleasePaid.outputs.upToDateWhen { false } // always run
    }
}
